/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package moveis;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Usuario
 */
public class InterfaceProdutos extends javax.swing.JFrame {

    InterfaceMoveis mainInterface;
    private Connection connFDB = new ConnectFDB().Connect();    
    
    private String bCupom;
    private String bCaixa;
    
    private ArrayList dataMount = new ArrayList();
    private ArrayList idMount = new ArrayList();
    
    /**
     * Creates new form InterfaceProdutos
     */
    public InterfaceProdutos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableProdutos = new javax.swing.JTable();
        subProdutos = new javax.swing.JButton();

        setLocation(new java.awt.Point(100, 100));
        setMaximumSize(new java.awt.Dimension(620, 350));
        setMinimumSize(new java.awt.Dimension(620, 350));
        setPreferredSize(new java.awt.Dimension(620, 350));
        setResizable(false);
        setSize(new java.awt.Dimension(620, 350));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("PRODUTOS");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tableProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produtos", "Montar?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableProdutos);
        if (tableProdutos.getColumnModel().getColumnCount() > 0) {
            tableProdutos.getColumnModel().getColumn(0).setMinWidth(500);
            tableProdutos.getColumnModel().getColumn(0).setPreferredWidth(500);
            tableProdutos.getColumnModel().getColumn(0).setMaxWidth(500);
            tableProdutos.getColumnModel().getColumn(1).setMinWidth(70);
            tableProdutos.getColumnModel().getColumn(1).setPreferredWidth(70);
            tableProdutos.getColumnModel().getColumn(1).setMaxWidth(70);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
        );

        subProdutos.setText("OK");
        subProdutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subProdutosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(264, 264, 264)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(subProdutos, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(subProdutos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        if(dataMount.size() > 0){
            System.out.println("PREENCHER TABLE");
            fillTable();
        }else{
            System.out.println("INICIALIZAR TABLE");
            initTable(bCupom, bCaixa);
        }
    }//GEN-LAST:event_formWindowOpened

    private void subProdutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subProdutosActionPerformed
        DefaultTableModel montagem = (DefaultTableModel) tableProdutos.getModel();        
        if(checkValues(dataMount)){
            System.out.println("CHECK VALUES DATAMOUNT");
        }else{
            dataMount = new ArrayList();
            for(int i = 0; i < montagem.getRowCount(); i++){
                if((boolean) montagem.getValueAt(i, 1)){
                    dataMount.add(i, 1);
                }else{
                    dataMount.add(i, 0);
                }
            }
        }
        mainInterface.setProdutos(dataMount);
        mainInterface.setIdProdutos(idMount);
        this.setVisible(false);
    }//GEN-LAST:event_subProdutosActionPerformed
    
    public void setAProdutos(ArrayList Produtos){
        dataMount = Produtos;
    }
    public ArrayList getAProdutos(){
        return dataMount;
    }
    public void setIdProdutos(ArrayList Ids){
        idMount = Ids;
    }
    public ArrayList getIdProdutos(){
        return idMount;
    }
    public void setMainInterface(InterfaceMoveis Interface){
        mainInterface = Interface;
    }
    public void setCupom(String cupom){
        bCupom = cupom;
    }
    public void setCaixa(String caixa){
        bCaixa = caixa;
    }
    
    private boolean checkValues(ArrayList data){
        if(!data.isEmpty()){
            int aux = 0;
            for(int i = 0;i < data.size(); i++){
                if((int)data.get(i) == 2){
                    aux++;
                }
            }
            if(aux == data.size()){
                return true;
            }
        }        
        return false;
    }
    
    private void initTable(String cupom, String caixa){
        DefaultTableModel newProdutos = (DefaultTableModel) tableProdutos.getModel();
        //SELECT ITEVDA.ID, TRANSACAO.TRNSEQ, TRANSACAO.CXANUM, TRANSACAO.TRNDAT, PRODUTO.PRODES, CLIENTE.CLIDES, CLIENTE.CLITEL, FUNCIONARIO.FUNDES FROM TRANSACAO INNER JOIN ITEVDA ON TRANSACAO.TRNSEQ=ITEVDA.TRNSEQ AND TRANSACAO.CXANUM=ITEVDA.CXANUM AND TRANSACAO.TRNDAT=ITEVDA.TRNDAT INNER JOIN PRODUTO ON ITEVDA.PROCOD=PRODUTO.PROCOD INNER JOIN CLIENTE ON TRANSACAO.CLICOD = CLIENTE.CLICOD INNER JOIN FUNCIONARIO ON TRANSACAO.FUNCOD = FUNCIONARIO.FUNCOD WHERE TRANSACAO.TRNSEQ='000871' AND TRANSACAO.CXANUM='001'
        String query = "SELECT PRODUTO.PROCOD, PRODUTO.PRODES FROM TRANSACAO INNER JOIN ITEVDA ON TRANSACAO.TRNSEQ=ITEVDA.TRNSEQ AND TRANSACAO.CXANUM=ITEVDA.CXANUM AND TRANSACAO.TRNDAT=ITEVDA.TRNDAT INNER JOIN PRODUTO ON ITEVDA.PROCOD = PRODUTO.PROCOD WHERE TRANSACAO.TRNSEQ=? AND TRANSACAO.CXANUM=?";
        ResultSet result;
        try {
            PreparedStatement pstm = connFDB.prepareStatement(query);
            pstm.setString(1, bCupom);
            pstm.setString(2,  bCaixa);
            result = pstm.executeQuery();
            int ix = 0;
            while(result.next()){
                //ATT VALOR AO ADICIONAR A NOVA TABELA NO BANCO (("PRODES"), 'VALOR A SER ATT')
                newProdutos.addRow(new Object[] {result.getString("PRODES"), false});
                idMount.add(ix, result.getString("PROCOD"));
                ix++;
            }
        } catch (SQLException ex) {
            Logger.getLogger(InterfaceProdutos.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }
    
    private void fillTable(){
        DefaultTableModel newProdutos = (DefaultTableModel) tableProdutos.getModel();
        if(checkValues(dataMount)){
            int ix = 0;
                while(ix < dataMount.size()){
                    try {
                        newProdutos.addRow(new Object[] {getProdes((String) idMount.get(ix)), true});
                    } catch (SQLException ex) {
                        Logger.getLogger(InterfaceProdutos.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
        }else{
            try {
                int ix = 0;
                while(ix < dataMount.size()){
                    //ATT VALOR AO ADICIONAR A NOVA TABELA NO BANCO (("PRODES"), 'VALOR A SER ATT')
                    if((int)dataMount.get(ix) == 1){
                        newProdutos.addRow(new Object[] {getProdes((String) idMount.get(ix)), true});
                        //System.out.println(getProdes((int) idMount.get(ix)));
                    }
                    if((int)dataMount.get(ix) == 0){
                        newProdutos.addRow(new Object[] {getProdes((String) idMount.get(ix)), false});
                    }
                    ix++;
                }
            } catch (SQLException ex) {
                Logger.getLogger(InterfaceProdutos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }        
    }
    
    private Object getProdes(String procod) throws SQLException{
        String query = "SELECT PRODES FROM PRODUTO WHERE PROCOD=?";
        PreparedStatement pstm = connFDB.prepareStatement(query);
        pstm.setString(1, procod);
        try{
            ResultSet result = pstm.executeQuery();
            result.next();
            return result.getString("PRODES");
        } catch (SQLException ex){
            Logger.getLogger(InterfaceProdutos.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "";
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfaceProdutos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfaceProdutos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfaceProdutos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfaceProdutos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfaceProdutos().setVisible(true);
            }
        });
        
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton subProdutos;
    private javax.swing.JTable tableProdutos;
    // End of variables declaration//GEN-END:variables

}
