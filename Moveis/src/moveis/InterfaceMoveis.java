
package moveis;

import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

public class InterfaceMoveis extends javax.swing.JFrame {
    
    private String bCupom;    
    private String bCaixa;
    private String bFuncod;
    private int bMontcod;
    private int swap; // =1 : NOVO REG | =0 : ATT REG CRIANDO NOVO | =2 : ATT REG ATUAIS
    private ArrayList bProdutos = new ArrayList(); //Id dos produtos
    private ArrayList bCheckProdutos = new ArrayList(); // 0/1/2 para montar produto
    private ArrayList IDProdutos = new ArrayList(); //ID da tabela PRODUTO_MONTAGEM
   
    private static InterfaceMoveis myInterface;
    InterfaceProdutos produtos = new InterfaceProdutos();
    
    private Connection connFDB = new ConnectFDB().Connect();   
    private Connection connMont = new ConnectMont().Connect();
    
    
    
    public void setProdutos(ArrayList Produtos){
        bCheckProdutos = Produtos;
    }
    public void setIdProdutos(ArrayList idProdutos){
        bProdutos = idProdutos;
    }
    
    private boolean checkValues(ArrayList data){
        if(!data.isEmpty()){
            int aux = 0;
            for(int i = 0;i < data.size(); i++){
                if((int)data.get(i) == 2){
                    aux++;
                }
            }
            if(aux == data.size()){
                return true;
            }
        }        
        return false;
    }
    
    private boolean compare(ArrayList data, ArrayList db){
        if(data.isEmpty() || db.isEmpty()){
            return false;
        }
        if(data.size() != db.size()){
            return  false;
        }
        for(int i = 0; i < data.size(); i++){
            if(((int)data.get(i)) != ((int) db.get(i))){
                return false;
            }
        }        
        return true;
    }
    private boolean compareStr(ArrayList data, ArrayList db){
        if(data.isEmpty() || db.isEmpty()){
            return false;
        }
        if(data.size() != db.size()){
            return  false;
        }
        for(int i = 0; i < data.size(); i++){
            if(!((String)data.get(i)).equals(((String)db.get(i)))){
                return false;
            }
        }        
        return true;
    }
    
    public InterfaceMoveis() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nCupom = new javax.swing.JTextField();
        buscaB = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        nCaixa = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        labelCliente = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        labelVendedor = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        labelData = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        labelTelefone = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        produtoB = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        nMontador = new javax.swing.JTextField();
        newSave = new javax.swing.JButton();
        nPrevMont = new javax.swing.JFormattedTextField();
        nDataMont = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(698, 357));
        setMinimumSize(new java.awt.Dimension(698, 357));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Nº Cupom: ");

        nCupom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nCupomActionPerformed(evt);
            }
        });

        buscaB.setText("OK");
        buscaB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscaBActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Caixa: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nCupom, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nCaixa, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buscaB)
                .addGap(41, 41, 41))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscaB)
                    .addComponent(jLabel5)
                    .addComponent(nCaixa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nCupom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("INFORMAÇÕES");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Cliente: ");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Vendedor: ");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Data: ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Telefone: ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                    .addComponent(labelVendedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelData, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                    .addComponent(labelTelefone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(258, 258, 258)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(labelCliente)
                    .addComponent(jLabel8)
                    .addComponent(labelData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(labelVendedor)
                    .addComponent(jLabel3)
                    .addComponent(labelTelefone))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Produtos: ");

        produtoB.setText("...");
        produtoB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                produtoBActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Montador: ");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Prev. Montagem: ");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Data Montagem: ");

        newSave.setText("OK");
        newSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSaveActionPerformed(evt);
            }
        });

        try {
            nPrevMont.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        nPrevMont.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        try {
            nDataMont.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        nDataMont.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel10)
                                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(jLabel11))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(nMontador, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nPrevMont, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                                    .addComponent(nDataMont))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(newSave)
                                .addGap(41, 41, 41))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(produtoB, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(produtoB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(nMontador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(nPrevMont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(nDataMont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(newSave)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void nCupomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nCupomActionPerformed
              
    }//GEN-LAST:event_nCupomActionPerformed

    private void buscaBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscaBActionPerformed
        SimpleDateFormat formatador = new SimpleDateFormat("dd/MM/yyyy");
        String cupom = nCupom.getText();
        String caixa = nCaixa.getText();
        //String query = "SELECT TRANSACAO.TRNDAT, CLIENTE.CLIDES, CLIENTE.CLITEL, FUNCIONARIO.FUNDES FROM TRANSACAO INNER JOIN CLIENTE ON TRANSACAO.CLICOD = CLIENTE.CLICOD INNER JOIN FUNCIONARIO ON TRANSACAO.FUNCOD = FUNCIONARIO.FUNCOD WHERE TRNSEQ='" + cupom + "' AND CXANUM='" + caixa + "'";
        // PROXIMA ETAPA
        String query = "SELECT count(*) as ROWCOUNT FROM MONTAGEM WHERE TRNSEQ=? AND CXANUM=?";
            try {
                PreparedStatement pstm = connMont.prepareStatement(query);
                pstm.setString(1, cupom);
                pstm.setString(2, caixa);
                ResultSet result = pstm.executeQuery();
                result.next();
                if(result.getInt("ROWCOUNT") > 0){
                    swap = 0;
                    System.out.println("Show: " +  result.getInt("ROWCOUNT"));
                    pstm.close();
                    
                    query = "SELECT C.CLIDES, F.FUNDES, T.TRNDAT, C.CLITEL FROM TRANSACAO as T INNER JOIN CLIENTE as C ON T.CLICOD=C.CLICOD INNER JOIN FUNCIONARIO as F ON T.FUNCOD=F.FUNCOD WHERE TRNSEQ=? AND CXANUM=?";                    
                    pstm = connFDB.prepareStatement(query);
                    pstm.setString(1, cupom);
                    pstm.setString(2, caixa);
                    result = pstm.executeQuery();
                    result.next();
                    labelVendedor.setText(result.getString("FUNDES"));
                    labelData.setText(formatador.format(result.getTimestamp("TRNDAT")));
                    labelCliente.setText(result.getString("CLIDES"));
                    labelTelefone.setText(result.getString("CLITEL"));
                    pstm.close();

                    query = "SELECT MONTCOD, PREVDAT, MONTDAT, FUNCOD FROM MONTAGEM WHERE TRNSEQ=? AND CXANUM=? ORDER BY MONTCOD";
                    try (PreparedStatement pstmWhere = connMont.prepareStatement(query)) {
                        pstmWhere.setString(1, cupom);
                        pstmWhere.setString(2, caixa);
                        ResultSet resultWhere = pstmWhere.executeQuery();
                        while(!resultWhere.isLast()){resultWhere.next();}
                        int id = resultWhere.getInt("MONTCOD");
                        String funcod = resultWhere.getString("FUNCOD");
                        String prevDat = "null";
                        String montDat = "null";
                        if(resultWhere.getTimestamp("PREVDAT") != null){
                           prevDat = formatador.format(resultWhere.getTimestamp("PREVDAT"));
                        }
                        if(resultWhere.getTimestamp("MONTDAT") != null){
                            montDat = formatador.format(resultWhere.getTimestamp("MONTDAT"));
                        }
                        

                        String queryVerify = "SELECT count(*) as ROWCOUNT FROM PRODUTO_MONTAGEM WHERE MONTCOD=? AND PROSTT!=2";
                        PreparedStatement vpstm = connMont.prepareStatement(queryVerify);
                        vpstm.setInt(1, id);
                        ResultSet vresult = vpstm.executeQuery();
                        vresult.next();
                        bFuncod = null;
                        if(vresult.getInt("ROWCOUNT") > 0){
                            String queryVerify2 = "SELECT count(*) as ROWCOUNT FROM PRODUTO_MONTAGEM WHERE MONTCOD=? AND PROSTT=1";
                            PreparedStatement vpstm2 = connMont.prepareStatement(queryVerify2);
                            vpstm2.setInt(1, id);
                            ResultSet vresult2 = vpstm2.executeQuery();
                            vresult2.next();
                            if(vresult2.getInt("ROWCOUNT") > 0){
                                bFuncod = funcod;
                                if(!prevDat.equals("null")){
                                    nPrevMont.setText(prevDat);
                                }
                            }
                        }
                        query = "SELECT ID, PROCOD, PROSTT FROM PRODUTO_MONTAGEM WHERE MONTCOD=? AND PROSTT!=2 ORDER BY ID;";
                        pstm = connMont.prepareStatement(query);
                        pstm.setInt(1, id);
                        bMontcod = id;
                        System.out.println(bMontcod);
                        result = pstm.executeQuery();
                        //SE PRECISO SALVAR MONTCOD E PRODUTO_MONTAGEM.ID
                    }
                    
                    int aux = 0;
                    while(result.next()){
                        bProdutos.add(aux, result.getString("PROCOD"));
                        bCheckProdutos.add(aux, result.getInt("PROSTT"));
                        IDProdutos.add(aux, result.getInt("ID"));
                        aux++;
                    }
                    pstm.close();
                    for(int i = 0; i < bProdutos.size(); i++){
                        System.out.println(bProdutos.get(i));
                        System.out.println(bCheckProdutos.get(i));
                    }
                    
                    if(bFuncod != null){
                        query = "SELECT FUNDES FROM FUNCIONARIO WHERE FUNCOD=?";
                        PreparedStatement pstmF = connFDB.prepareStatement(query);
                        pstmF.setString(1, bFuncod);
                        ResultSet resultF = pstmF.executeQuery();
                        resultF.next();
                        nMontador.setText(resultF.getString("FUNDES"));
                        pstmF.close();
                    }                                       
                    
                    
                    produtos = new InterfaceProdutos();
                    produtos.setAProdutos(bCheckProdutos);
                    produtos.setIdProdutos(bProdutos);
        
                } else {
                    swap = 1;
                    System.out.println("nao tem");
                    query = "SELECT TRANSACAO.TRNDAT, CLIENTE.CLIDES, CLIENTE.CLITEL, FUNCIONARIO.FUNDES FROM TRANSACAO INNER JOIN CLIENTE ON TRANSACAO.CLICOD = CLIENTE.CLICOD INNER JOIN FUNCIONARIO ON TRANSACAO.FUNCOD = FUNCIONARIO.FUNCOD WHERE TRNSEQ=? AND CXANUM=?";
                    pstm = connFDB.prepareStatement(query);
                    pstm.setString(1, cupom);
                    pstm.setString(2, caixa);
                    result = pstm.executeQuery();
                    
                    result.next();
                    labelVendedor.setText(result.getString("FUNDES"));
                    labelData.setText(formatador.format(result.getTimestamp("TRNDAT")));
                    labelCliente.setText(result.getString("CLIDES"));
                    labelTelefone.setText(result.getString("CLITEL"));
        
                    produtos = new InterfaceProdutos();
                }
                bCupom = cupom;
                bCaixa = caixa;
            } catch (SQLException ex){
                Logger.getLogger(InterfaceMoveis.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_buscaBActionPerformed

    private void produtoBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_produtoBActionPerformed
        produtos.setCupom(bCupom);
        produtos.setCaixa(bCaixa);
        produtos.setMainInterface(myInterface);
        produtos.setVisible(true);        
    }//GEN-LAST:event_produtoBActionPerformed

    private void newSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSaveActionPerformed
        
        SimpleDateFormat formatador = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        SimpleDateFormat parseador = new SimpleDateFormat("dd/MM/yyyy");
        
        if(checkValues(bCheckProdutos)){
            System.out.println("UPDATE TUDO 2" + bCheckProdutos.get(0));
            String update = "UPDATE MONTAGEM SET FUNCOD=?, PREVDAT=?, MONTDAT=? WHERE MONTCOD=?";
            try {
                PreparedStatement upstm = connMont.prepareStatement(update);
                upstm.setString(1, "aaaaaa");
                if(nPrevMont.getText().equals("  /  /    ")){
                    upstm.setString(2, null);
                } else{
                    upstm.setString(2, formatador.format(parseador.parse(nPrevMont.getText())));
                }
                if(nDataMont.getText().equals("  /  /    ")){
                    upstm.setString(3, null);
                } else{
                    upstm.setString(3, formatador.format(parseador.parse(nDataMont.getText())));
                }
                upstm.setInt(4, bMontcod);
            } catch (SQLException ex) {
                Logger.getLogger(InterfaceMoveis.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(InterfaceMoveis.class.getName()).log(Level.SEVERE, null, ex);
            }            
        }else{
            if(swap == 1){
                System.out.println("PRIMEIRO REGISTO");
                String query = "INSERT INTO MONTAGEM(TRNSEQ, CXANUM, TRNDAT, FUNCOD, PREVDAT, MONTDAT) VALUES(?, ?, ?, ?, ?, ?)";        
                try {
                    PreparedStatement pstm = connMont.prepareStatement(query);
                    pstm.setString(1, bCupom);
                    pstm.setString(2, bCaixa);
                    pstm.setString(3, formatador.format(parseador.parse(labelData.getText())));
                    pstm.setString(4, "000003");
                    if(nPrevMont.getText().equals("  /  /    ")){
                        pstm.setString(5, null);
                    } else{
                        pstm.setString(5, formatador.format(parseador.parse(nPrevMont.getText())));
                    }
                    if(nDataMont.getText().equals("  /  /    ")){
                        pstm.setString(6, null);
                    } else{
                        pstm.setString(6, formatador.format(parseador.parse(nDataMont.getText())));
                    }

                    if(!pstm.execute()){
                        query = "SELECT MONTCOD FROM MONTAGEM WHERE TRNSEQ=? AND CXANUM=? AND TRNDAT=?";
                        int montcod;
                        try (PreparedStatement pstmID = connMont.prepareStatement(query)) {
                            pstmID.setString(1, bCupom);
                            pstmID.setString(2, bCaixa);
                            pstmID.setString(3, formatador.format(parseador.parse(labelData.getText())));
                            ResultSet resultID = pstmID.executeQuery();
                            resultID.next();
                            montcod = resultID.getInt("MONTCOD");
                        }                        
                        query = "INSERT INTO PRODUTO_MONTAGEM(PROCOD, MONTCOD, PROSTT) VALUES(?, ?, ?)";
                        try (PreparedStatement pstmIN = connMont.prepareStatement(query)) {
                            for(int i = 0; i < bProdutos.size(); i++){
                                pstmIN.setString(1, bProdutos.get(i).toString());
                                pstmIN.setInt(2, montcod);
                                if((int) bCheckProdutos.get(i) == 1){
                                    if(nDataMont.getText().equals("  /  /    ")){
                                        pstmIN.setInt(3, (int) bCheckProdutos.get(i));
                                    }else{
                                        pstmIN.setInt(3, 2);
                                    }
                                }else if((int) bCheckProdutos.get(i) == 0){
                                    pstmIN.setInt(3, (int) bCheckProdutos.get(i));
                                }
                                pstmIN.execute();
                            }
                        }
                    }
                    pstm.close();
                } catch (SQLException ex) {
                    Logger.getLogger(InterfaceMoveis.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParseException ex) {
                    Logger.getLogger(InterfaceMoveis.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }else if(swap == 0){
                System.out.println("ATUALIZACAO DE REGISTO UP/UP");
                
                String dataDB = "SELECT PREVDAT, MONTDAT FROM MONTAGEM WHERE MONTCOD=?";
                try {
                    PreparedStatement pstmDB = connMont.prepareStatement(dataDB);
                    pstmDB.setInt(1, bMontcod);
                    ResultSet resultDB = pstmDB.executeQuery();
                    resultDB.next();
                    if(resultDB.getTimestamp("MONTDAT") == null){
                        if((!nPrevMont.getText().equals("  /  /    "))){
                            String updateM = "UPDATE MONTAGEM SET FUNCOD=?, PREVDAT=?, MONTDAT=? WHERE MONTCOD=?";
                            PreparedStatement pstmM = connMont.prepareStatement(updateM);
                            pstmM.setString(1, "000003");
                            if(nPrevMont.getText().equals("  /  /    ")){
                                pstmM.setString(2, null);
                            } else{
                                pstmM.setString(2, formatador.format(parseador.parse(nPrevMont.getText())));
                            }
                            if(nDataMont.getText().equals("  /  /    ")){
                                pstmM.setString(3, null);
                            } else{
                                pstmM.setString(3, formatador.format(parseador.parse(nDataMont.getText())));
                            }
                            pstmM.setInt(4, bMontcod);
                            pstmM.execute();
                            
                            String updatePM = "UPDATE PRODUTO_MONTAGEM SET PROSTT=? WHERE MONTCOD=? AND ID=?";
                            PreparedStatement pstmUP;
                            for(int i = 0; i < bProdutos.size(); i++){
                                pstmUP = connMont.prepareStatement(updatePM);
                                if((int) bCheckProdutos.get(i) == 1){
                                    if(nDataMont.getText().equals("  /  /    ")){
                                        pstmUP.setInt(1, (int) bCheckProdutos.get(i));
                                    }else{
                                        pstmUP.setInt(1, 2);
                                    }
                                }else if((int) bCheckProdutos.get(i) == 0){
                                    pstmUP.setInt(1, (int) bCheckProdutos.get(i));
                                }
                                pstmUP.setInt(2, bMontcod);
                                pstmUP.setInt(3, (int)IDProdutos.get(i));
                                pstmUP.execute();
                            }
                            
                        }
                    }else{
                        System.out.println("ATUALIZACAO DE REGISTO INSERT/UP");                
                        String insertM = "INSERT INTO MONTAGEM(TRNSEQ, CXANUM, TRNDAT, FUNCOD, PREVDAT, MONTDAT) VALUES(?, ?, ?, ?, ?, ?)";                
                        try {
                            PreparedStatement pstm = connMont.prepareStatement(insertM);
                            pstm.setString(1, bCupom);
                            pstm.setString(2, bCaixa);
                            pstm.setString(3, formatador.format(parseador.parse(labelData.getText())));
                            pstm.setString(4, "000003");
                            if(nPrevMont.getText().equals("  /  /    ")){
                                pstm.setString(5, null);
                            } else{
                                pstm.setString(5, formatador.format(parseador.parse(nPrevMont.getText())));
                            }
                            if(nDataMont.getText().equals("  /  /    ")){
                                pstm.setString(6, null);
                            } else{
                                pstm.setString(6, formatador.format(parseador.parse(nDataMont.getText())));
                            }

                            if(!pstm.execute()){
                                String query = "SELECT MONTCOD FROM MONTAGEM WHERE TRNSEQ=? AND CXANUM=? AND TRNDAT=? ORDER BY MONTCOD";
                                PreparedStatement pstmID = connMont.prepareStatement(query);
                                pstmID.setString(1, bCupom);
                                pstmID.setString(2, bCaixa);
                                pstmID.setString(3, formatador.format(parseador.parse(labelData.getText())));
                                int montcod;
                                try (ResultSet resultID = pstmID.executeQuery()) {
                                    while(!resultID.isLast()){
                                        resultID.next();
                                    }                            
                                    montcod = resultID.getInt("MONTCOD");
                                }

                                String updatePM = "UPDATE PRODUTO_MONTAGEM SET MONTCOD=?, PROSTT=? WHERE ID=?";
                                PreparedStatement pstmUP;
                                for(int i = 0; i < bProdutos.size(); i++){
                                    pstmUP = connMont.prepareStatement(updatePM);
                                    pstmUP.setInt(1, montcod);
                                    if((int) bCheckProdutos.get(i) == 1){
                                        if(nDataMont.getText().equals("  /  /    ")){
                                            pstmUP.setInt(2, (int) bCheckProdutos.get(i));
                                        }else{
                                            pstmUP.setInt(2, 2);
                                        }
                                    }else if((int) bCheckProdutos.get(i) == 0){
                                        pstmUP.setInt(2, (int) bCheckProdutos.get(i));
                                    }
                                    pstmUP.setInt(3, (int) IDProdutos.get(i));
                                    pstmUP.execute();
                                }
                            }                    
                        } catch (SQLException ex) {
                            Logger.getLogger(InterfaceMoveis.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (ParseException ex) {
                            Logger.getLogger(InterfaceMoveis.class.getName()).log(Level.SEVERE, null, ex);
                        }
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(InterfaceMoveis.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (ParseException ex) {                
                    Logger.getLogger(InterfaceMoveis.class.getName()).log(Level.SEVERE, null, ex);
                }                
                
            }
        }
    }//GEN-LAST:event_newSaveActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    }//GEN-LAST:event_formWindowClosing
 
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfaceMoveis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfaceMoveis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfaceMoveis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfaceMoveis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                myInterface = new InterfaceMoveis();
                myInterface.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscaB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel labelCliente;
    private javax.swing.JLabel labelData;
    private javax.swing.JLabel labelTelefone;
    private javax.swing.JLabel labelVendedor;
    private javax.swing.JTextField nCaixa;
    private javax.swing.JTextField nCupom;
    private javax.swing.JFormattedTextField nDataMont;
    private javax.swing.JTextField nMontador;
    private javax.swing.JFormattedTextField nPrevMont;
    private javax.swing.JButton newSave;
    private javax.swing.JButton produtoB;
    // End of variables declaration//GEN-END:variables
}
